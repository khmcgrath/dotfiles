#!/usr/bin/env zsh

function _zunit_assert_is_substring_of() {
  local value=$1 comparison=$2
  [[ "$comparison" = *"$value"* ]] && return 0
  echo "'$value' is not a substring of '$comparison'"
  exit 1
}
function _zunit_assert_is_not_substring_of() {
  local value=$1 comparison=$2
  [[ "$comparison" != *"$value"* ]] && return 0
  echo "'$value' is a substring of '$comparison'"
  exit 1
}
function _zunit_assert_contains() {
  local value=$1 comparison=$2
  [[ "$value" = *"$comparison"* ]] && return 0
  echo "'$value' does not contain '$comparison'"
  exit 1
}
function _zunit_assert_does_not_contain() {
  local value=$1 comparison=$2
  [[ "$value" != *"$comparison"* ]] && return 0
  echo "'$value' contains '$comparison'"
  exit 1
}
function _zunit_assert_equals() {
  local value=$1 comparison=$2
  [[ $value -eq $comparison ]] && return 0
  echo "'$value' is not equal to '$comparison'"
  exit 1
}
function _zunit_assert_not_equal_to() {
  local value=$1 comparison=$2
  [[ $value -ne $comparison ]] && return 0
  echo "'$value' is equal to '$comparison'"
  exit 1
}
function _zunit_assert_is_positive() {
  local value=$1 comparison=$2
  [[ $value -gt 0 ]] && return 0
  echo "'$value' is not positive"
  exit 1
}
function _zunit_assert_is_negative() {
  local value=$1 comparison=$2
  [[ $value -lt 0 ]] && return 0
  echo "'$value' is not negative"
  exit 1
}
function _zunit_assert_is_greater_than() {
  local value=$1 comparison=$2
  [[ $value -gt $comparison ]] && return 0
  echo "'$value' is not greater than '$comparison'"
  exit 1
}
function _zunit_assert_is_less_than() {
  local value=$1 comparison=$2
  [[ $value -lt $comparison ]] && return 0
  echo "'$value' is not less than '$comparison'"
  exit 1
}
function _zunit_assert_same_as() {
  local value=$1 comparison=$2
  [[ $value = $comparison ]] && return 0
  echo "'$value' is not the same as '$comparison'"
  exit 1
}
function _zunit_assert_different_to() {
  local value=$1 comparison=$2
  [[ $value != $comparison ]] && return 0
  echo "'$value' is the same as '$comparison'"
  exit 1
}
function _zunit_assert_is_empty() {
  local value=$1
  [[ -z ${value[@]} ]] && return 0
  echo "'${value[@]}' is not empty"
  exit 1
}
function _zunit_assert_is_not_empty() {
  local value=$1
  [[ -n ${value[@]} ]] && return 0
  echo "value is empty"
  exit 1
}
function _zunit_assert_matches() {
  local value=$1 pattern=$2
  [[ $value =~ $pattern ]] && return 0
  echo "'$value' does not match /$pattern/"
  exit 1
}
function _zunit_assert_does_not_match() {
  local value=$1 pattern=$2
  [[ ! $value =~ $pattern ]] && return 0
  echo "'$value' matches /$pattern/"
  exit 1
}
function _zunit_assert_in() {
  local i found=0 value=$1
  local -a array
  array=(${(@)@:2})
  for i in ${(@f)array}; do
    [[ $i = $value ]] && found=1
  done
  [[ $found -eq 1 ]] && return 0
  echo "'$value' is not in (${(@f)array})"
  exit 1
}
function _zunit_assert_not_in() {
  local i found=0 value=$1
  local -a array
  array=(${(@)@:2})
  for i in ${(@f)array}; do
    [[ $i = $value ]] && found=1
  done
  [[ $found -eq 0 ]] && return 0
  echo "'$value' is in (${(@f)array})"
  exit 1
}
function _zunit_assert_is_key_in() {
  local i found=0 value=$1
  local -A hash
  hash=(${(@)@:2})
  for k v in ${(@kv)hash}; do
    [[ $k = $value ]] && found=1
  done
  [[ $found -eq 1 ]] && return 0
  echo "'$value' is not a key in (${(@kv)hash})"
  exit 1
}
function _zunit_assert_is_not_key_in() {
  local i found=0 value=$1
  local -A hash
  hash=(${(@)@:2})
  for k v in ${(@kv)hash}; do
    [[ $k = $value ]] && found=1
  done
  [[ $found -eq 0 ]] && return 0
  echo "'$value' is a key in (${(@kv)hash})"
  exit 1
}
function _zunit_assert_is_value_in() {
  local i found=0 value=$1
  local -A hash
  hash=(${(@)@:2})
  for k v in ${(@kv)hash}; do
    [[ $v = $value ]] && found=1
  done
  [[ $found -eq 1 ]] && return 0
  echo "'$value' is not a value in (${(@kv)hash})"
  exit 1
}
function _zunit_assert_is_not_value_in() {
  local i found=0 value=$1
  local -A hash
  hash=(${(@)@:2})
  for k v in ${(@kv)hash}; do
    [[ $v = $value ]] && found=1
  done
  [[ $found -eq 0 ]] && return 0
  echo "'$value' is a value in (${(@kv)hash})"
  exit 1
}
function _zunit_assert_exists() {
  local pathname=$1 filepath
  if [[ "${pathname:0:1}" != "/" ]]; then
    filepath="$testdir/${pathname}"
  else
    filepath="$pathname"
  fi
  [[ -e "$filepath" ]] && return 0
  echo "'$pathname' does not exist"
  exit 1
}
function _zunit_assert_is_file() {
  local pathname=$1 filepath
  if [[ "${pathname:0:1}" != "/" ]]; then
    filepath="$testdir/${pathname}"
  else
    filepath="$pathname"
  fi
  [[ -f "$filepath" ]] && return 0
  echo "'$pathname' does not exist or is not a file"
  exit 1
}
function _zunit_assert_is_dir() {
  local pathname=$1 filepath
  if [[ "${pathname:0:1}" != "/" ]]; then
    filepath="$testdir/$pathname"
  else
    filepath="$pathname"
  fi
  [[ -d "$filepath" ]] && return 0
  echo "'$pathname' does not exist or is not a directory"
  exit 1
}
function _zunit_assert_is_link() {
  local pathname=$1 filepath
  if [[ "${pathname:0:1}" != "/" ]]; then
    filepath="$testdir/${pathname}"
  else
    filepath="$pathname"
  fi
  [[ -h "$filepath" ]] && return 0
  echo "'$pathname' does not exist or is not a symbolic link"
  exit 1
}
function _zunit_assert_is_readable() {
  local pathname=$1 filepath
  if [[ "${pathname:0:1}" != "/" ]]; then
    filepath="$testdir/${pathname}"
  else
    filepath="$pathname"
  fi
  [[ -r "$filepath" ]] && return 0
  echo "'$pathname' does not exist or is not readable"
  exit 1
}
function _zunit_assert_is_writable() {
  local pathname=$1 filepath
  if [[ "${pathname:0:1}" != "/" ]]; then
    filepath="$testdir/${pathname}"
  else
    filepath="$pathname"
  fi
  [[ -w "$filepath" ]] && return 0
  echo "'$pathname' does not exist or is not writable"
  exit 1
}
function _zunit_assert_is_executable() {
  local pathname=$1 filepath
  if [[ "${pathname:0:1}" != "/" ]]; then
    filepath="$testdir/${pathname}"
  else
    filepath="$pathname"
  fi
  [[ -x "$filepath" ]] && return 0
  echo "'$pathname' does not exist or is not executable"
  exit 1
}
function _zunit_init_usage() {
  echo "$(color yellow 'Usage:')"
  echo "  zunit init [options]"
  echo
  echo "$(color yellow 'Options:')"
  echo "  -h, --help         Output help text and exit"
  echo "  -v, --version      Output version information and exit"
  echo "  -t, --travis       Generate .travis.yml in project"
}
function _zunit_parse_yaml() {
  local s w fs prefix=$2
  s='[[:space:]]*'
  w='[a-zA-Z0-9_]*'
  fs="$(echo @|tr @ '\034')"
  sed -ne "s|^\(${s}\)\(${w}\)${s}:${s}\"\(.*\)\"${s}\$|\1${fs}\2${fs}\3|p" \
      -e "s|^\(${s}\)\(${w}\)${s}[:-]${s}\(.*\)${s}\$|\1${fs}\2${fs}\3|p" "$1" |
  awk -F"${fs}" '{
  indent = length($1)/2;
  vname[indent] = $2;
  for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
          vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
          printf("%s%s%s=(\"%s\")\n", "'"$prefix"'",vn, $2, $3);
      }
  }' | sed 's/_=/+=/g'
}
function _zunit_init() {
  local with_travis
  zparseopts -D t=with_travis -travis=with_travis
  local yaml="tap: false
directories:
  tests: tests
  output: tests/_output
  support: tests/_support
time_limit: 0
fail_fast: false
allow_risky: false"
  local example="#!/usr/bin/env zunit
@test 'Example' {
  assert "'"true"'" same_as "'"false"'"
}"
  local bootstrap="#!/usr/bin/env zsh
# Write your bootstrap code here"
  local travis_yml="addons:
  apt:
    packages:
      zsh
install:
  - mkdir .bin
  - curl -L https://github.com/zunit-zsh/zunit/releases/download/v$(_zunit_version)/zunit > .bin/zunit
  - curl -L https://raw.githubusercontent.com/molovo/revolver/master/revolver > .bin/revolver
  - curl -L https://raw.githubusercontent.com/molovo/color/master/color.zsh > .bin/color
before_script:
  - chmod u+x .bin/{color,revolver,zunit}
  - export PATH=\"\$PWD/.bin:\$PATH\"
script: zunit"
  if [[ -f "$PWD/.zunit.yml" ]]; then
    echo $(color yellow "ZUnit config file already exists at $PWD/.zunit.yml. Skipping...")
  else
    echo "Writing ZUnit config file to $PWD/.zunit.yml"
    echo "$yaml" > "$PWD/.zunit.yml"
  fi
  if [[ -d "$PWD/tests" ]]; then
    echo $(color yellow "Test directory already exists at $PWD/tests. Skipping...")
  else
    echo "Creating test directory at $PWD/tests"
    mkdir -p tests/_{output,support}
    touch tests/_{output,support}/.gitkeep
    echo "$bootstrap" > "$PWD/tests/_support/bootstrap"
    echo "$example" > "$PWD/tests/example.zunit"
  fi
  if [[ -n $with_travis ]]; then
    if [[ -f "$PWD/.travis.yml" ]]; then
      echo $(color yellow "Travis config already exists at $PWD/.travis.yml. Skipping...")
    else
      echo "Writing Travis CI config to $PWD/.travis.yml"
      echo "$travis_yml" > "$PWD/.travis.yml"
    fi
  fi
}
function _zunit_run_usage() {
  echo "$(color yellow 'Usage:')"
  echo "  zunit run [options] [tests...]"
  echo
  echo "$(color yellow 'Options:')"
  echo "  -h, --help             Output help text and exit"
  echo "  -v, --version          Output version information and exit"
  echo "  -f, --fail-fast        Stop the test runner immediately after the first failure"
  echo "  -t, --tap              Output results in a TAP compatible format"
  echo "      --verbose          Prints full output from each test"
  echo "      --output-text      Print results to a text log, in TAP compatible format"
  echo "      --output-html      Print results to a HTML page"
  echo "      --allow-risky      Supress warnings generated for risky tests"
  echo "      --time-limit <n>   Set a time limit of n seconds for each test"
}
function _zunit_human_time() {
  local tmp=$(( $1 / 1000 ))
  local days=$(( tmp / 60 / 60 / 24 ))
  local hours=$(( tmp / 60 / 60 % 24 ))
  local minutes=$(( tmp / 60 % 60 ))
  local seconds=$(( tmp % 60 ))
  local ms=$(( $1 % 1000 ))
  (( $days > 0 )) && print -n "${days}d "
  (( $hours > 0 )) && print -n "${hours}h "
  (( $minutes > 0 )) && print -n "${minutes}m "
  (( $seconds > 5 )) && print -n "${seconds}s "
  (( $seconds < 30 )) && (( $seconds > 5 )) && print -n "${ms}ms"
  (( $seconds <= 5 )) && print -n "${1}ms"
}
function _zunit_output_results() {
  integer elapsed=$(( end_time - start_time ))
  echo
  echo "$total tests run in $(_zunit_human_time $elapsed)"
  echo
  echo "$(color yellow underline 'Results')                        "
  echo "$(color green '✔') Passed      $passed                    "
  echo "$(color red '✘') Failed      $failed                      "
  echo "$(color red '‼') Errors      $errors                      "
  echo "$(color magenta '●') Skipped     $skipped                 "
  echo "$(color yellow '‼') Warnings    $warnings                 "
  echo
  [[ -n $output_text ]] && echo "TAP report written at $PWD/$logfile_text"
  [[ -n $output_html ]] && echo "HTML report written at $PWD/$logfile_html"
}
function _zunit_execute_test() {
  local name="$1" body="$2"
  if [[ -n $body ]] && [[ -n $name ]]; then
    [[ -z $tap ]] && revolver update "${name}"
    (( $+functions[__zunit_tmp_test_function] )) && \
      unfunction __zunit_tmp_test_function
    func="function __zunit_tmp_test_function() {
      setopt ERR_EXIT
      if (( \$+functions[__zunit_test_teardown] )); then
        zshexit() {
          __zunit_test_teardown 2>&1
        }
      fi
      integer _zunit_assertion_count=0
      integer state
      local output
      typeset -a lines
      if (( \$+functions[__zunit_test_setup] )); then
        __zunit_test_setup 2>&1
      fi
      ${body}
      if (( \$+functions[__zunit_test_teardown] )); then
        __zunit_test_teardown 2>&1
      fi
      zshexit() {}
      [[ \$_zunit_assertion_count -gt 0 ]] || return 248
    }"
    total=$(( total + 1 ))
    output=$(eval "$(echo "$func")" 2>&1)
    if [[ $? -ne 0 ]]; then
      _zunit_error 'Failed to parse test body' $output
      return 126
    fi
    eval "$(echo "$func")" 2>/dev/null
    if (( ! $+functions[__zunit_tmp_test_function] )); then
      _zunit_error 'Failed to parse test body'
      return 126
    fi
    autoload is-at-least
    if is-at-least 5.1.0 && [[ -n ${time_limit:#0} ]]; then
      __zunit_async_test_wrapper() {
        local pid
        integer time_limit_ms=$(( time_limit * 1000 ))
        integer time=$(( EPOCHREALTIME * 1000 ))
        integer kill_time=$(( $time + $time_limit_ms ))
        __zunit_tmp_test_function &
        pid=$!
        while kill -0 $pid >/dev/null 2>&1; do
          time=$(( EPOCHREALTIME * 1000 ))
          if [[ $time -gt $kill_time ]]; then
            kill -9 $pid >/dev/null 2>&1
            echo "Test took too long to run. Terminated after $time_limit seconds"
            exit 78
          fi
        done
        wait $pid
        return $?
      }
      output="$(__zunit_async_test_wrapper 2>&1)"
    else
      output="$(__zunit_tmp_test_function 2>&1)"
    fi
    state=$?
    if [[ $state -eq 48 ]]; then
      _zunit_skip $output
      return
    elif [[ $state -eq 78 ]]; then
      _zunit_error $output
      return
    elif [[ -z $allow_risky && $state -eq 248 ]]; then
      [[ -n $verbose && -n $output ]] && echo $output
      _zunit_warn 'No assertions were run, test is risky'
      return
    elif [[ -n $allow_risky && $state -eq 248 ]] || [[ $state -eq 0 ]]; then
      [[ -n $verbose && -n $output ]] && echo $output
      _zunit_success
      return
    else
      _zunit_failure $output
      return 1
    fi
  fi
}
function _zunit_encode_test_name() {
  echo "$1" | tr A-Z a-z \
            | tr _ ' ' \
            | tr - ' ' \
            | tr -s ' ' \
            | sed 's/\- /-/' \
            | sed 's/ \-/-/' \
            | tr ' ' "-"
}
function _zunit_run_testfile() {
  local testbody testname pattern \
        setup teardown
  local -a bits; bits=("${(s/@/)1}")
  local testfile="${bits[1]}" test_to_run="${bits[2]}" testdir="$(dirname "$testfile")"
  local -a lines tests test_names
  tests=()
  test_names=()
  [[ -z $tap ]] && revolver update "Loading tests from $testfile"
  pattern='^ *@test  *([^ ].*)  *\{ *(.*)$'
  local oldIFS=$IFS
  IFS=$'\n' lines=($(cat $testfile))
  IFS=$oldIFS
  for line in $lines[@]; do
    if [[ "$line" =~ $pattern ]]; then
      testname="${line[(( ${line[(i)[\']]}+1 )),(( ${line[(I)[\']]}-1 ))]}"
      if [[ -n $test_to_run && $testname != $test_to_run ]]; then
        testname=''
        continue
      fi
      test_names=($test_names $testname)
      tests[${#test_names}]=''
    elif [[ "$line" =~ '^@setup([ ])?\{$' ]]; then
      setup=''
      parsing_setup=true
    elif [[ "$line" =~ '^@teardown([ ])?\{$' ]]; then
      teardown=''
      parsing_teardown=true
    elif [[ "$line" = '}' ]]; then
      testname=''
      parsing_setup=''
      parsing_teardown=''
    else
      if [[ -n $testname ]]; then
        tests[${#test_names}]+="$line"$'\n'
        continue
      fi
      if [[ -n $parsing_setup ]]; then
        setup+="$line"$'\n'
        continue
      fi
      if [[ -n $parsing_teardown ]]; then
        teardown+="$line"$'\n'
        continue
      fi
    fi
  done
  if [[ -n $setup ]]; then
    setupfunc="function __zunit_test_setup() {
      ${setup}
    }"
    output=$(eval "$(echo "$setupfunc")" 2>&1)
    if [[ $? -ne 0 ]]; then
      _zunit_error "Failed to parse setup method" $output
      return 126
    fi
    eval "$(echo "$setupfunc")" 2>/dev/null
    if (( ! $+functions[__zunit_test_setup] )); then
      _zunit_error "Failed to parse setup method"
      return 126
    fi
  fi
  if [[ -n $teardown ]]; then
    teardownfunc="function __zunit_test_teardown() {
      ${teardown}
    }"
    output=$(eval "$(echo "$teardownfunc")" 2>&1)
    if [[ $? -ne 0 ]]; then
      _zunit_error "Failed to parse teardown method" $output
      return 126
    fi
    eval "$(echo "$teardownfunc")" 2>/dev/null
    if (( ! $+functions[__zunit_test_teardown] )); then
      _zunit_error "Failed to parse teardown method"
      return 126
    fi
  fi
  integer i=1
  local name body
  for name in "${test_names[@]}"; do
    body="${tests[$i]}"
    _zunit_execute_test "$name" "$body"
    i=$(( i + 1 ))
  done
  (( $+functions[__zunit_test_setup] )) && unfunction __zunit_test_setup
  (( $+functions[__zunit_test_teardown] )) && unfunction __zunit_test_teardown
  (( $+functions[__zunit_tmp_test_function] )) && unfunction __zunit_tmp_test_function
}
function _zunit_parse_argument() {
  local -a bits; bits=("${(s/@/)1}")
  local argument="$bits[1]" test_name="$bits[2]"
  if [[ "${argument:0:1}" = "_" || "$(basename $argument | cut -c 1)" = "_" ]]; then
    return
  fi
  if [[ -d $argument ]]; then
    for file in $(find $argument -mindepth 1 -maxdepth 1); do
      _zunit_parse_argument $file
    done
    return
  fi
  if [[ -f $argument ]]; then
    line=$(cat $argument | head -n 1)
    if [[ $line =~ "#! ?/usr/bin/env zunit" ]]; then
      testfiles[(( ${#testfiles} + 1 ))]=("$argument${test_name+"@$test_name"}")
      return
    fi
    echo $(color red "File '$argument' is not a valid zunit test file") >&2
    echo "Test files must contain the following shebang on the first line" >&2
    echo "  #!/usr/bin/env zunit" >&2
    exit 126
  fi
  echo $(color red "Test file or directory '$argument' could not be found") >&2
  exit 126
}
function _zunit_run() {
  local -a arguments testfiles
  local fail_fast tap allow_risky verbose
  local output_text logfile_text output_html logfile_html
  zmodload zsh/datetime
  local start_time=$((EPOCHREALTIME*1000)) end_time
  zparseopts -D -E \
    h=help -help=help \
    v=version -version=version \
    f=fail_fast -fail-fast=fail_fast \
    t=tap -tap=tap \
    -verbose=verbose \
    -output-text=output_text \
    -output-html=output_html \
    -allow-risky=allow_risky \
    -time-limit:=time_limit
  if [[ -n $tap ]] || [[ "$zunit_config_tap" = "true" ]]; then
    tap=1
    echo 'TAP version 13'
  fi
  if [[ -z $tap ]]; then
    echo $(color yellow 'Launching ZUnit')
    echo "ZUnit: $(_zunit_version)"
    echo "ZSH:   $(zsh --version)"
    echo
  fi
  if [[ -n $output_text || -n $output_html ]]; then
    if [[ $missing_config -eq 1 ]]; then
      echo $(color red '.zunit.yml could not be found. Run `zulu init`')
      exit 1
    fi
    if [[ -z $zunit_config_directories_output ]]; then
      echo $(color red 'Output directory must be specified in .zunit.yml')
      exit 1
    fi
  fi
  if [[ -n $output_text ]]; then
    logfile_text="$zunit_config_directories_output/output.txt"
    echo 'TAP version 13' > $logfile_text
  fi
  if [[ -n $output_html ]]; then
    logfile_html="$zunit_config_directories_output/output.html"
    _zunit_html_header > $logfile_html
  fi
  if [[ -n $zunit_config_directories_support ]]; then
    local support="$zunit_config_directories_support"
    if [[ ! -d $support ]]; then
      echo $(color red "Support directory at $support is missing")
      exit 1
    fi
    if [[ -f "$support/bootstrap" ]]; then
      source "$support/bootstrap"
      echo "$(color green '✔') Sourced bootstrap script $support/bootstrap"
    fi
  fi
  if [[ -z $fail_fast ]] && [[ "$zunit_config_fail_fast" = "true" ]]; then
    fail_fast=1
  fi
  if [[ -z $allow_risky ]] && [[ "$zunit_config_allow_risky" = "true" ]]; then
    allow_risky=1
  fi
  if [[ -z $verbose ]] && [[ "$zunit_config_verbose" = "true" ]]; then
    verbose=1
  fi
  if [[ -n $time_limit ]]; then
    shift time_limit
  elif [[ -n $zunit_config_time_limit ]]; then
    time_limit=$zunit_config_time_limit
  fi
  arguments=("$@")
  testfiles=()
  [[ -z $tap ]] && revolver start 'Loading tests'
  if [[ ${#arguments} -eq 0 ]]; then
    if [[ -n $zunit_config_directories_tests ]]; then
      arguments=("$zunit_config_directories_tests")
    else
      arguments=("tests")
    fi
  fi
  local argument
  for argument in $arguments; do
    _zunit_parse_argument $argument
  done
  local line
  local total=0 passed=0 failed=0 errors=0 warnings=0 skipped=0
  for testfile in ${(o)testfiles}; do
    _zunit_run_testfile $testfile
  done
  end_time=$((EPOCHREALTIME*1000))
  [[ -n $tap ]] && echo "1..$total"
  [[ -n $output_text ]] && echo "1..$total" >> $logfile_text
  [[ -n $output_html ]] && _zunit_html_footer >> $logfile_html
  [[ -z $tap ]] && _zunit_output_results && revolver stop
  [[ $(( $passed + $skipped )) -eq $total ]]
}
function _zunit_fail_shutdown() {
  [[ -z $tap ]] && revolver stop
  echo $(color red bold 'Execution halted after failure')
  end_time=$((EPOCHREALTIME*1000))
  [[ -z $tap ]] && _zunit_output_results
  if [[ -n $output_html ]]; then
    name='Execution halted after failure'
    _zunit_html_error >> $logfile_html
    _zunit_html_footer >> $logfile_html
  fi
  exit 1
}
function _zunit_success() {
  [[ -n $output_text ]] && _zunit_tap_success "$@" >> $logfile_text
  [[ -n $output_html ]] && _zunit_html_success "$@" >> $logfile_html
  passed=$(( passed + 1 ))
  if [[ -n $tap ]]; then
    _zunit_tap_success "$@"
    return
  fi
  echo "$(color green '✔') ${name}"
}
function _zunit_failure() {
  local message="$1" output="${(@)@:2}"
  failed=$(( failed + 1 ))
  [[ -n $output_text ]] && _zunit_tap_failure "$@" >> $logfile_text
  [[ -n $output_html ]] && _zunit_html_failure "$@" >> $logfile_html
  if [[ -n $tap ]]; then
    _zunit_tap_failure "$@"
  else
    echo "$(color red '✘' ${name})"
    echo "  $(color red underline ${message})"
    echo "  $(color red ${output})"
  fi
  [[ -n $fail_fast ]] && _zunit_fail_shutdown
}
function _zunit_error() {
  local message="$1" output="${(@)@:2}"
  errors=$(( errors + 1 ))
  [[ -n $output_text ]] && _zunit_tap_error "$@" >> $logfile_text
  [[ -n $output_html ]] && _zunit_html_error "$@" >> $logfile_html
  if [[ -n $tap ]]; then
    _zunit_tap_error "$@"
  else
    echo "$(color red '‼' ${name})"
    echo "  $(color red underline ${message})"
    echo "  $(color red ${output})"
  fi
  [[ -n $fail_fast ]] && _zunit_fail_shutdown
}
function _zunit_warn() {
  local message="$@"
  warnings=$(( warnings + 1 ))
  [[ -n $output_text ]] && _zunit_tap_warn "$@" >> $logfile_text
  [[ -n $output_html ]] && _zunit_html_warn "$@" >> $logfile_html
  if [[ -n $tap ]]; then
    _zunit_tap_warn "$@"
    return
  fi
  echo "$(color yellow '‼') ${name}"
  echo "  $(color yellow underline ${message})"
}
function _zunit_skip() {
  local message="$@"
  skipped=$(( skipped + 1 ))
  [[ -n $output_text ]] && _zunit_tap_skip "$@" >> $logfile_text
  [[ -n $output_html ]] && _zunit_html_skip "$@" >> $logfile_html
  if [[ -n $tap ]]; then
    _zunit_tap_skip "$@"
    return
  fi
  echo "$(color magenta '●') Skipped: ${name}"
  echo "  \033[0;38;5;242m# ${message}\033[0;m"
}
function color() {
  local color=$1 style=$2 b=0
  shift
  case $style in
    bold|b)           b=1; shift ;;
    italic|i)         b=2; shift ;;
    underline|u)      b=4; shift ;;
    inverse|in)       b=7; shift ;;
    strikethrough|s)  b=9; shift ;;
  esac
  case $color in
    black|b)    echo "\033[${b};30m${@}\033[0;m" ;;
    red|r)      echo "\033[${b};31m${@}\033[0;m" ;;
    green|g)    echo "\033[${b};32m${@}\033[0;m" ;;
    yellow|y)   echo "\033[${b};33m${@}\033[0;m" ;;
    blue|bl)    echo "\033[${b};34m${@}\033[0;m" ;;
    magenta|m)  echo "\033[${b};35m${@}\033[0;m" ;;
    cyan|c)     echo "\033[${b};36m${@}\033[0;m" ;;
    white|w)    echo "\033[${b};37m${@}\033[0;m" ;;
    *)          echo "\033[${b};38;5;$(( ${color} ))m${@}\033[0;m" ;;
  esac
}
function load() {
  local name="$1"
  local filename
  if [[ "${name:0:1}" = "/" ]]; then
    filename="${name}"
  else
    filename="$testdir/${name}"
  fi
  if [[ -f "$filename" ]]; then
    source "$filename"
    return 0
  fi
  if [[ -f "$filename.zsh" ]]; then
    source "$filename.zsh"
    return 0
  fi
  echo "File $filename does not exist" >&2
  exit 1
}
function run() {
  unsetopt ERR_EXIT
  local oldIFS=$IFS name
  local -a cmd
  cmd=("${@[@]}")
  name="${cmd[1]}"
  type -- $name > /dev/null
  if [[ $? -ne 0 && ! -f $name && -f "$testdir/${name}" ]]; then
    cmd[1]="$testdir/${name}"
  fi
  local -a dont_quote
  dont_quote=(
    "[[:digit:]]#(>|>>)(&|)[[:digit:]]#"
    "[[:digit:]]#(<|<<)(&|)[[:digit:]]#"
    "<<<" ";" "\\|" "\\|\\|" "&" "&&"
    "([0-9]#|[a-zA-Z_][a-zA-Z0-9_]#)=*" "\\)"
  )
  IFS=$'\n' eval "output=\$( function run {
  ${cmd[@]/(#m)*/${${${${${(M)MATCH:#(${(j:|:)~dont_quote})}:+$MATCH}}:-\"${MATCH//(#b)([\"\`\\])/\\${match[1]}}\"}}} 2>&1 }; run )";
  state="$?"
  IFS=$'\n'
  lines=("${(@f)output}")
  IFS=$oldIFS
  if [[ -n $verbose && -n $output ]]; then
    echo $output
  fi
  setopt ERR_EXIT
}
function evl() {
  setopt localoptions
  unsetopt ERR_EXIT
  local ___oldIFS=$IFS ___name
  local -a ___cmd
  ___cmd=("${@[@]}")
  ___name="${___cmd[1]}"
  type -- $___name > /dev/null
  if [[ $? -ne 0 && ! -f $___name && -f "$testdir/${___name}" ]]; then
    ___cmd[1]="$testdir/${___name}"
  fi
  local -a ___dont_quote
  ___dont_quote=(
    "[[:digit:]]#(>|>>)(&|)[[:digit:]]#"
    "[[:digit:]]#(<|<<)(&|)[[:digit:]]#"
    "<<<" ";" "\\|" "\\|\\|" "&" "&&"
    "([0-9]#|[a-zA-Z_][a-zA-Z0-9_]#)=*" "\\)"
  )
  local ___OUTFILE=$(mktemp)
  IFS=$'\n' builtin eval "function __eval {
        ${___cmd[@]/(#m)*/${${${${${(M)MATCH:#(${(j:|:)~___dont_quote})}:+$MATCH}}:-\"${MATCH//(#b)([\"\`\\])/\\${match[1]}}\"}}} \
        }; __eval >!$___OUTFILE 2>&1";
  state="$?"
  output="$(cat "$___OUTFILE")"
  unset -f __eval;
  command rm -f "$___OUTFILE"
  IFS=$'\n'
  lines=("${(@f)output}")
  IFS=$___oldIFS
  if [[ -n $verbose && -n $output ]]; then
    echo $output
  fi
}
function assert() {
  local value=$1 assertion=$2
  local -a comparisons
  local oldIFS=$IFS
  IFS=$'\n'
  comparisons=(${(@)@:3})
  if [[ -z $assertion ]]; then
    assertion=$value
    value=""
  fi
  if (( ! $+functions[_zunit_assert_${assertion}] )); then
    echo "$(color red "Assertion $assertion does not exist")"
    exit 127
  fi
  _zunit_assertion_count=$(( _zunit_assertion_count + 1 ))
  "_zunit_assert_${assertion}" "$value" ${(@f)comparisons[@]}
  local state=$?
  if [[ $state -ne 0 ]]; then
    exit $state
  fi
  IFS=$oldIFS
}
function pass() {
  exit 0
}
function fail() {
  echo "$@"
  exit 1
}
function error() {
  echo "$@"
  exit 78
}
function skip() {
  echo "$@"
  exit 48
}
function _zunit_html_header() {
  echo '<!DOCTYPE html> <html lang="en"> <head> <meta charset="UTF-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <meta http-equiv="X-UA-Compatible" content="ie=edge"> <title>ZUnit Test Results</title> <link href="https://fonts.googleapis.com/css?family=Fira+Mono" rel="stylesheet"> <style> html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, main, menu, nav, output, ruby, section, summary, time, mark, audio, video { margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: baseline; box-sizing: border-box; } /* HTML5 display-role reset for older browsers */ article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section { display: block; } body { line-height: 1; } ol, ul { list-style: none; } blockquote, q { quotes: none; } blockquote:before, blockquote:after, q:before, q:after { content: ""; content: none; } table { border-collapse: collapse; border-spacing: 0; } html { font: 100%/1.5em "Fira Code", "Fira Mono", monospace} body { line-height: 1.5em; color: #394648; font-size: 1.125em; } h1, h2, h3, h4, h5, h6 { font-weight: 700; } h1 { font-size: 3em; line-height: 1em; margin-bottom: 0.5em; } h2 { font-size: 2.25em; line-height: 1.35em; margin-bottom: 0.66667em; } h3 { font-size: 1.5em; line-height: 1em; margin-bottom: 1em; } h4 { font-size: 1.3125em; line-height: 1.14286em; margin-bottom: 1.14286em; } h5 { font-size: 1.125em; line-height: 1.35em; margin-bottom: 1.33333em; } h6 { font-size: 1em; line-height: 1.5em; margin-bottom: 1.5em; } p.lead { font-size: 1.5em; } p, ul, ol, dl, blockquote { margin-bottom: 1.5em; } ul { list-style: disc inside; } ol { list-style: decimal inside; } ul ul, ol ul { list-style: circle inside; margin-bottom: 0; margin-left: 1.5em; } ul ol, ol ol { list-style: lower-roman inside; margin-bottom: 0; margin-left: 1.5em; } em { font-style: italic; } strong { font-weight: 700; } small { font-size: .75em; line-height: .5em; } hr { height: 0; margin: calc(3em - 1px) auto 3em; border: solid rgba(53, 12, 16, 0.05); border-width: 0 0 1px; } a { color: #4897da; text-decoration: none; } blockquote, figcaption { display: block; } pre { margin: 0 0 1.5em; } code { font-family: "Fira Code", "Courier New", "Inconsolata", monospace; line-height: 0; } body { padding: 3em 1.5em; } @media (min-width: 36em) { body { padding: 3em; } } @media (min-width: 60em) { body { padding: 3em 6em; } } .header { border-bottom: 1px solid rgba(0,0,0,.1); margin-bottom: 3em; } .header--nav a, .header--nav span { margin-right: 1.5em; } .main { display: flex; } .results { flex: 0 1 100%; padding-right: 15em; } .sidebar--nav { flex: 0 0 12em; position: fixed; right: 6em; top: 7.5em; width: 12em; } .results { list-style: none; } .results--item { border-radius: .15em; display: none; padding: 0 .75em; } .results--item.visible { display: block; } .results--item.expanded { border: 1px solid rgba(0,0,0,.1); margin: 0 0 .375em; } .results--item span { display: none; } .results--item.expanded span { display: block; } .results--item pre { display: none; font-size: .75em; margin: 0; padding: 0; } .results--item.expanded pre { display: block; } .results--item h6 { line-height: 2.25em; margin: 0; } .results--item h6::before { box-sizing: border-box; display: inline-block; margin-right: .375em; vertical-align: middle; } .results--item:not(.passed) h6::after { content: "+"; float: right; } .results--item:not(.passed).expanded h6::after { content: "⌃"; } .results--item.passed h6::before { color: #4ecdc4; content: "✔"; } .results--item.failed h6 { color: #ff6b6b; } .results--item.failed h6::before { color: #ff6b6b; content: "✘"; } .results--item.error { background: #b23939; color: #fff; } .results--item.error h6::before { content: "‼"; } .results--item.warning h6::before { color: #dccb80; content: "‼"; } .results--item.skipped h6::before { color: #d567c6; content: "•"; } .sidebar--nav ul { list-style: none; } .sidebar--nav-item { background: rgba(0,0,0,.1); border-radius: .15em; margin-bottom: .375em; padding: .375em .75em; } .sidebar--nav-item_total, .sidebar--nav-item_elapsed { padding: 0 .75em; } .sidebar--nav-item_elapsed { margin-bottom: 1.5em; } .sidebar--nav-item-count { float: right; font-weight: 700; } .sidebar--nav-item_all.selected { background: #4897da; color: #fff; } .sidebar--nav-item_passed.selected { background: #4ecdc4; color: #fff; } .sidebar--nav-item_failed.selected { background: #ff6b6b; color: #fff; } .sidebar--nav-item_errors.selected { background: #b23939; color: #fff; } .sidebar--nav-item_skipped.selected { background: #d567c6; color: #fff; } .sidebar--nav-item_warnings.selected { background: #dccb80; } </style> <script>;(function() { "use strict"; window.addEventListener("DOMContentLoaded", function() { var results = document.querySelectorAll(".results--item"), links = document.querySelectorAll(".sidebar--nav-item"); var hideAll = function(evt) { for (var i = 0; i < links.length; i++) { (function(link) { if (link.classList.contains("sidebar--nav-item_all")) { return; } if (!link.classList.contains("selected")) { link.classList.add("selected"); } toggleVisibility({currentTarget: link}) }(links[i])); } }; var showAll = function(evt) { for (var i = 0; i < links.length; i++) { (function(link) { if (link.classList.contains("sidebar--nav-item_all")) { return; } if (link.classList.contains("selected")) { link.classList.remove("selected"); } toggleVisibility({currentTarget: link}); }(links[i])); } }; var allLinksAreVisible = function() { var visible = true; for (var i = 0; i < links.length; i++) { if (!links[i].classList.contains("sidebar--nav-item_all") && !links[i].classList.contains("selected")) { visible = false; } } return visible; }; var toggleVisibility = function(evt) { evt = evt || window.evt; var link = evt.currentTarget, target = link.dataset.target; if (link.classList.contains("selected")) { link.classList.remove("selected"); if (link.classList.contains("sidebar--nav-item_all")) { hideAll(); } else { document.querySelector(".sidebar--nav-item_all").classList.remove("selected"); } } else { link.classList.add("selected"); if (link.classList.contains("sidebar--nav-item_all")) { showAll(); } else { if (allLinksAreVisible()) { document.querySelector(".sidebar--nav-item_all").classList.add("selected"); } } } for (var i = 0; i < results.length; i++) { (function(result) { if (result.classList.contains(target)) { if (link.classList.contains("selected")) { result.classList.add("visible"); } else { result.classList.remove("visible"); } } }(results[i])); } }; var toggleResultExpansion = function(evt) { evt = evt || window.event; var result = evt.currentTarget; if (result.classList.contains("expanded")) { result.classList.remove("expanded"); } else { result.classList.add("expanded"); } }; for (var i = 0; i < results.length; i++) { (function(result) { if (!result.classList.contains("passed")) { result.addEventListener("click", toggleResultExpansion, true); } }(results[i])); }; for (var i = 0; i < links.length; i++) { (function(link) { link.addEventListener("click", toggleVisibility, true); }(links[i])); }; }); })();</script> </head> <body> <header class="header"> <nav class="header--nav"> <span>ZUnit Test Results</span> <a href="https://github.com/zunit-zsh/zunit">Documentation</a> </nav> </header> <main role="main" class="main"> <ul class="results">'
}
function _zunit_html_footer() {
  integer elapsed=$(( end_time - start_time ))
  output="</ul> <nav class='sidebar--nav'> <ul> <li class='sidebar--nav-item_total'><strong>$total</strong> tests run</li> <li class='sidebar--nav-item_elapsed'>taking <strong>$(_zunit_human_time $elapsed)</strong></li> <li class='sidebar--nav-item sidebar--nav-item_all selected'> All <span class='sidebar--nav-item-count'>$total</span> </li> <li class='sidebar--nav-item sidebar--nav-item_passed selected' data-target='passed'> Passed <span class='sidebar--nav-item-count'>$passed</span> </li> <li class='sidebar--nav-item sidebar--nav-item_failed selected' data-target='failed'> Failed <span class='sidebar--nav-item-count'>$failed</span> </li> <li class='sidebar--nav-item sidebar--nav-item_errors selected' data-target='error'> Errors <span class='sidebar--nav-item-count'>$errors</span> </li> <li class='sidebar--nav-item sidebar--nav-item_warnings selected' data-target='warning'> Warnings <span class='sidebar--nav-item-count'>$warnings</span> </li> <li class='sidebar--nav-item sidebar--nav-item_skipped selected' data-target='skipped'> Skipped <span class='sidebar--nav-item-count'>$skipped</span> </li> </ul> </nav> </main> </body> </html>"
  echo $output
}
_zunit_html_success() {
  echo "<li class='results--item passed visible'>
    <h6>$name</h6>
  </li>"
}
_zunit_html_failure() {
  echo "<li class='results--item failed visible'>
    <h6>$name</h6>
    <pre><code>$message</code></pre>
  </li>"
}
_zunit_html_error() {
  echo "<li class='results--item error visible'>
    <h6>$name</h6>
    <pre><code>$message</code></pre>
  </li>"
}
_zunit_html_warn() {
  echo "<li class='results--item warning visible'>
    <h6>$name</h6>
    <span class='results--item_warning'>$message</span>
  </li>"
}
_zunit_html_skip() {
  echo "<li class='results--item skipped visible'>
    <h6>$name</h6>
    <span class='results--item_skip-reason'>$message</span>
  </li>"
}
_zunit_html_fatal_error() {
  message="$@"
  echo "<li class='results--item error fatal visible'>
    <h6>$message</h6>
  </li>"
}
function _zunit_tap_success() {
  echo "ok ${total} - ${name}"
}
function _zunit_tap_failure() {
  local message="$@"
  echo "not ok ${total} - Failure: ${name}"
  echo "  ---"
  echo "  message: ${message}"
  echo "  severity: fail"
  echo "  ..."
  [[ -n $fail_fast ]] && echo "Bail out!"
}
function _zunit_tap_error() {
  local message="$@"
  echo "not ok ${total} - Error: ${name}"
  echo "  ---"
  echo "  message: ${message}"
  echo "  severity: fail"
  echo "  ..."
  [[ -n $fail_fast ]] && echo "Bail out!"
}
function _zunit_tap_warn() {
  local message="$@"
  echo "ok ${total} - Warning: ${name}"
  echo "  ---"
  echo "  message: ${message}"
  echo "  severity: comment"
  echo "  ..."
}
function _zunit_tap_skip() {
  local message="$@"
  echo "ok ${total} - # SKIP ${name}"
  echo "  ---"
  echo "  message: ${message}"
  echo "  severity: comment"
  echo "  ..."
}
setopt extendedglob typesetsilent
function _zunit_usage() {
  echo "$(color yellow 'Usage:')"
  echo "  zunit [options] [command] [tests...]"
  echo
  echo "$(color yellow 'Commands:')"
  echo "  init               Bootstrap zunit in a new project"
  echo "  run [tests...]     Run tests"
  echo
  echo "$(color yellow 'Options:')"
  echo "  -h, --help         Output help text and exit"
  echo "  -v, --version      Output version information and exit"
  echo "  -f, --fail-fast    Stop the test runner immediately after the first failure"
  echo "  -t, --tap          Output results in a TAP compatible format"
  echo "      --verbose      Prints full output from each test"
  echo "      --output-text  Print results to a text log, in TAP compatible format"
  echo "      --output-html  Print results to a HTML page"
  echo "      --allow-risky  Supress warnings generated for risky tests"
  echo "      --time-limit   Set a time limit in seconds for each test"
}
function _zunit_version() {
  echo '0.8.2'
}
function _zunit() {
  local help version ctx="$1" missing_dependencies=0 missing_config=1
  if [[ -f .zunit.yml ]]; then
    $(eval $(_zunit_parse_yaml .zunit.yml 'zunit_config_') >/dev/null 2>&1)
    if [[ $? -eq 0 ]]; then
      eval $(_zunit_parse_yaml .zunit.yml 'zunit_config_') >/dev/null 2>&1
      missing_config=0
    else
      echo "\033[0;31mFailed to parse config file\033[0;m" >&2
      exit 1
    fi
  fi
  $(type revolver >/dev/null 2>&1)
  if [[ $? -ne 0 ]]; then
    echo "\033[0;31mMissing required dependency: Revolver - https://github.com/molovo/revolver\033[0;m" >&2
    exit 1
  fi
  zparseopts -D -E \
    h=help -help=help \
    v=version -version=version
  if [[ -n $version ]]; then
    _zunit_version
    exit 0
  fi
  case "$ctx" in
    init )
      if [[ -n $help ]]; then
        _zunit_init_usage
        exit 0
      fi
      _zunit_init "${(@)@:2}"
      ;;
    run )
      if [[ -n $help ]]; then
        _zunit_run_usage
        exit 0
      fi
      _zunit_run "${(@)@:2}"
      ;;
    * )
      if [[ -n $help ]]; then
        _zunit_usage
        exit 0
      fi
      _zunit_run "$@"
      ;;
  esac
}
_zunit "$@"
