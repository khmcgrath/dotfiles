#!/usr/bin/env bash
# reset environment variables that could interfere with normal usage
export GREP_OPTIONS=
# put all utility functions here

# make a temporary file
git_extra_mktemp() {
    mktemp -t "$(basename "$0")".XXXXXXX
}

git_extra_default_branch() {
    local extras_default_branch init_default_branch
    extras_default_branch=$(git config --get git-extras.default-branch)
    init_default_branch=$(git config --get init.defaultBranch)
    if [ -n "$extras_default_branch" ]; then
        echo "$extras_default_branch"
    elif [ -n "$init_default_branch" ]; then
        echo "$init_default_branch"
    else
        echo "main"
    fi
}
#
# check whether current directory is inside a git repository
#

is_git_repo() {
  git rev-parse --show-toplevel > /dev/null 2>&1
  result=$?
  if test $result != 0; then
    >&2 echo 'Not a git repo!'
    exit $result
  fi
}

is_git_repo

branch_prefix=$(git config --get git-extras.feature.prefix)

if [ -z "$branch_prefix" ]; then
   branch_prefix="feature"
fi

merge_mode="--no-ff"
declare -a argv
while test $# != 0
do
  case $1 in
  -a|--alias )
    if [[ -n $2 ]]
    then
      shift # shift -a|-alias
      branch_prefix=$1
    else
      argv+=($1) # treat tail '-a' as <name>
    fi
    ;;
  -r|--remote )
    if [[ -n $2 ]]
    then
      remote=$2
      shift
    else
      remote="origin"
    fi
    ;;
  --squash )
    merge_mode="--squash"
    ;;
  --from )
    start_point=$2
    shift
    ;;
  * )
    argv+=($1)
    ;;
  esac
  shift
done

concatargs() {
  str=$(IFS='-'; echo "$*")
  branch="$branch_prefix"/$str
}

if test "${argv[0]}" = "finish"; then
  test -z "${argv[1]}" && echo "$branch_prefix" "<name> required." 1>&2 && exit 1
  branch="$branch_prefix"/"${argv[1]}"
  git merge ${merge_mode} "$branch" && git delete-branch "$branch"
else
  test -z "${argv[0]}" && echo "$branch_prefix" "<name> required." 1>&2 && exit 1
  if test -n "${argv[1]}"; then
    concatargs "${argv[@]}"
  else
    branch="$branch_prefix"/"${argv[0]}"
  fi

  if [[ -n $remote ]] && [[ -z $start_point ]]
  then
    git create-branch -r $remote $branch
  fi

  if [[ -z $remote ]] && [[ -z $start_point ]]
  then
    git create-branch $branch
  fi

  if [[ -n $remote ]] && [[ -n $start_point ]]
  then
    git create-branch -r $remote --from $start_point $branch
  fi

  if [[ -z $remote ]] && [[ -n $start_point ]]
  then
    git create-branch --from $start_point $branch
  fi
fi
